name: Go Build and Release
permissions:
  contents: write

on:
  push:
    tags:
      - "v*.*.*" # Trigger on version tags
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux builds
          - goos: linux
            goarch: amd64
            output: ai-linux-amd64
          - goos: linux
            goarch: arm64
            output: ai-linux-arm64
          # macOS builds
          - goos: darwin
            goarch: amd64
            output: ai-darwin-amd64
          - goos: darwin
            goarch: arm64
            output: ai-darwin-arm64
          # Windows builds
          - goos: windows
            goarch: amd64
            output: ai-windows-amd64.exe
          - goos: windows
            goarch: arm64
            output: ai-windows-arm64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.9" # Specify your Go version
          cache: true # Enable built-in Go caching

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build for ${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: go build -o ${{ matrix.output }} -ldflags="-s -w"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: ${{ matrix.output }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            # Get the latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          files: ./artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
